
One of the biggest advantages of Git is its branching capabilities. Unlike centralized version control systems, Git branches are cheap and easy to merge. This facilitates the feature branch workflow popular with many Git users.

Feature branches provide an isolated environment for every change to your codebase. When a developer wants to start working on something—no matter how big or small—they create a new branch. This ensures that the master branch always contains production-quality code.

Using feature branches is not only more reliable than directly editing production code, but it also provides organizational benefits. They let you represent development work at the same granularity as the your agile backlog. For example, you might implement a policy where each Jira ticket is addressed in its own feature branch.


Many source code management tools such as Bitbucket enhance core Git functionality with pull requests. A pull request is a way to ask another developer to merge one of your branches into their repository. This not only makes it easier for project leads to keep track of changes, but also lets developers initiate discussions around their work before integrating it with the rest of the codebase.

Since they’re essentially a comment thread attached to a feature branch, pull requests are extremely versatile. When a developer gets stuck with a hard problem, they can open a pull request to ask for help from the rest of the team. Alternatively, junior developers can be confident that they aren’t destroying the entire project by treating pull requests as a formal code review.

Community

In many circles, Git has come to be the expected version control system for new projects. If your team is using Git, odds are you won’t have to train new hires on your workflow, because they’ll already be familiar with distributed development.


Git is very popular among open source projects. This means it’s easy to leverage 3rd-party libraries and encourage others to fork your own open source code.

Faster Release Cycle


Git for product management

The benefits of Git for product management is that making more frequent releases outcomes more frequent customer feedback and faster updates in reaction to that feedback. Instead of waiting for the next release 8 weeks from now, you can push a solution out to customers as quickly as your developers can write the code


Save Time
about a few seconds per command, but it quickly adds up in your work day. Git is lightning fast. 

Work Offline

 Git, almost everything is possible simply on your local machine: make a commit, browse your project’s complete history, merge or create branches… 


Undo Mistakes and data recovery

there’s a little “undo” command for almost every situation.
Revert a whole commit because that feature isn’t necessary
even restore “deleted” commits with the Reflog – because, behind the scenes, Git rarely really deletes anything. 
every clone that someone on the team has on his machine is a usable backup. Additionally, almost every action in Git only adds data (deleting is very rare). 


 Work in Your Own Way

When working with Git you can use your very own workflow. 


 You don’t have to be a code acrobat to qualify for using Git. 
you can connect with multiple remote repositories, rebase instead of merge, and work with submodules when you need it. But you can just as easily work with one central remote repository like in Subversion. 

________________________________


Software code and version control systems

A version control system records changes carried out to a file, or a set of files over time, and helps you to recall specific versions of the code later on when you need it. If you're a developer or a web designer and want to keep track of each and every version of your code developed for a particular feature, a Version Control System "VCS" allows you to:

Revert the code files back to their previous state

Recall and revert the entire project back to its previous state

Compare code changes over specific durations of time

Find who last modified a piece of code that might be causing an issue or a problem

Who introduced a particular issue and when

…and much more.

advantages of Git?

1. Performance

Git performs very strongly and reliably when compared to other version control systems. 

2. Security

Git is designed specially to maintain the integrity of source code. File contents (as well as the relationship between file and directories, tags, commits, versions etc.) are secured cryptographically using an algorithm called SHA1


3. Flexibility

A key design objective of Git is the kind of flexibility it offers to support several kinds of nonlinear development workflows and its efficiency in handling both small scale and large scale projects as well as protocols. 



 4. Wide acceptance

Git offers the type of performance, functionality, security and flexibility that most developers and teams need to develop their projects. When compared to other VCS Git is most widely accepted system owing to its universally accepted usability and performance standards.


5. Quality open source project

Git is a widely supported open source project with over ten years of operational history. 





